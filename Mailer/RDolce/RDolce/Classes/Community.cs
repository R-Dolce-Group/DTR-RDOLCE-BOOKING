// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var community = Community.FromJson(jsonString);

namespace RDolce
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Community
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("createdTime")]
        public DateTimeOffset CreatedTime { get; set; }

        [JsonProperty("fields")]
        public Fields Fields { get; set; }
    }

    public partial class Fields
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("Neighborhood")]
        public string Neighborhood { get; set; }

        [JsonProperty("Images")]
        public Image[] Images { get; set; }

        [JsonProperty("Contact")]
        public string Contact { get; set; }

        [JsonProperty("Email")]
        public string Email { get; set; }

        [JsonProperty("Address")]
        public string Address { get; set; }

        [JsonProperty("Phone")]
        public string Phone { get; set; }

        [JsonProperty("Gate Phone")]
        public string GatePhone { get; set; }

        [JsonProperty("Fax")]
        public string Fax { get; set; }

        [JsonProperty("Credit Fees")]
        public string CreditFees { get; set; }

        [JsonProperty("URL")]
        public Uri Url { get; set; }

        [JsonProperty("Community Name")]
        public string[] CommunityName { get; set; }

        [JsonProperty("Units")]
        public string[] Units { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("filename")]
        public string Filename { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("thumbnails")]
        public Thumbnails Thumbnails { get; set; }
    }

    public partial class Thumbnails
    {
        [JsonProperty("small")]
        public Full Small { get; set; }

        [JsonProperty("large")]
        public Full Large { get; set; }

        [JsonProperty("full")]
        public Full Full { get; set; }
    }

    public partial class Full
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public partial class Community
    {
        public static Community FromJson(string json) => JsonConvert.DeserializeObject<Community>(json, ConverterCommunity.Settings);
    }

    public static class SerializeComminity
    {
        public static string ToJson(this Community self) => JsonConvert.SerializeObject(self, ConverterCommunity.Settings);
    }

    internal static class ConverterCommunity
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
